/*******************************************************************************
 * Copyright (C) 2006-2013 AITIA International, Inc.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package ai.aitia.meme.paramsweep.batch;

import java.util.EventObject;

/** A class of batch related events. */
public class BatchEvent extends EventObject {
	
	//====================================================================================================
	// members
	
	private static final long serialVersionUID = -2613294571987328805L;
	private double number;
	
	/** This enumeration defines event types that can occur during batch execution:<br>
	 *  - BATCH_ENDED: the last run has finished<br>
	 *  - RUN_ENDED: the current run has finished<br>
	 *  - STEP_ENDED: the current unit of execution (e.g. tick, internal event) of model has finished;<br>
	 *  <p>
	 *  There are some additional special events those are generated by some "higher level" controllers 
	 *  only: (Don't use these in IBatchController implementation.)<br>
	 * 
	 *  - ITERATION_ENDED: the current iteration of a dynamic DOE (Design of Experiments) plugin has finished<br>
	 *  - SOFT_CANCELLED: soft cancel<br>
	 *  - HARD_CANCELLED: hard cancel<br>
	 */
	public enum EventType {
		BATCH_ENDED, 
		RUN_ENDED, 
		STEP_ENDED,
		
		// special events
		ITERATION_ENDED,
		SOFT_CANCELLED,
		HARD_CANCELLED
	}
	
	private EventType member;
	
	//====================================================================================================
	// methods
	
	//----------------------------------------------------------------------------------------------------
	public BatchEvent(Object source, EventType member) {
		super(source);
		this.member = member;
	}
	
	//----------------------------------------------------------------------------------------------------
	/** This constructor is for event types RUN_ENDED and STEP_ENDED.
	 *  <code>number</code> is the current run number or the actual time value 
	 *  defined by model.
	 */
	public BatchEvent(Object source, EventType member, double number) {
		super(source);
		this.member = member;
		this.number = number;
	}
	
	//----------------------------------------------------------------------------------------------------
	public double getNumber() {	return number; }
	public EventType getEventType() { return member; }
}
