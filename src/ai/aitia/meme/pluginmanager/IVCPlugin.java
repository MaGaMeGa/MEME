/*******************************************************************************
 * Copyright (C) 2006-2013 AITIA International, Inc.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package ai.aitia.meme.pluginmanager;

import java.util.BitSet;
import java.util.List;

import ai.aitia.meme.database.ColumnType;

//-----------------------------------------------------------------------------
/**
 * Interface for View Creation Plugins (including aggregate functions).
 */ 
 /* A plugin valaszthat hogy az argumentumaibol szamol valamit,
 * vagy az osszes parameterbol kivalogatja azokat amikkel foglalkozni akar
 * es azokbol szamol vmit.
 */
public interface IVCPlugin extends IPlugin 
{
	//-------------------------------------------------------------------------
	/** 
	 * Type for arguments of IVCPlugin methods.
	 */
	interface IContext extends IPlugin.IContext
	{
		/** List of all available arguments, in arbitrary order */
		List<? extends Parameter>	getAllPars();

		/** 
		 * Fixed-size list, in the same order as getAllPars().
		 * The elements of the Object[] arrays should not be replaced
		 * or modified directly (this may mess up the interpreter), 
		 * instead, you should make a copy, modify that and use the
		 * set() method of the returned List to assign the modified
		 * Object[] array to the parameter.
		 * Note that the length of the Object[] array cannot be modified
		 * in this way: set() throws IllegalArgumentException if you 
		 * try to assign an Object[] array of different length. 
		 * Furthermore, it throws NullPointerException if the new 
		 * Object[] is <code>null</code>. 
		 */
		List<Object[]>				getAllValues();

		/** List of visible arguments, as indices into getAllPars()[] */
		BitSet						getVisibleParIndices(); 

		/** Finds 'parName' amongst visible parameters and returns its 
		 * index in getAllPars()[] or -1 if not found. */
		int							indexOf(String parName);	

		/** List of actual arguments, maybe disjoint with getAllPars() */
		List<? extends Parameter>	getArgumentPars();

		/** 
		 * Returns the argument values, in a fixed-size list, 
		 * in the order of getArgumentPars(). The issues described  
		 * at {@link #getAllValues()} apply to this method, too.
		 * @see #getAllValues()
		 */
		List<Object[]>				getArguments(); 
	}

	//-------------------------------------------------------------------------
	// A "beepitett" aggregacios fgv. csak annyiban kulonbozik a view creation
	// plugintol hogy mas ikon jelenik meg hozza a combobox listajaban. 
	// Maskulonben ugyanugy kezeljuk oket.
	// A kesobbiek soran elkepzelheto hogy meg is szuntetem ezt a kulonbsegtetelt.
	/** Same as the IVCPlugin. We use the difference of the two types to 
	 *  assign different icons to the instances.
	 */
	interface IBuiltinAggregateFn extends IVCPlugin {
	}

	//-------------------------------------------------------------------------
	/** 
	 * Returns true if this plugin can be applied to the selected arguments. 
	 * Postcondition: if <code>isSelectionOK(context)</code> then <code>getReturnType(context) != null</code>
	 */
	boolean isSelectionOK(IContext context);

	//-------------------------------------------------------------------------
	/**
	 * Predicts the data type of the values generated by this plugin.
	 * This may depend on the type of the input parameters (=selected parameters).
	 * For example, MIN(double...) results doubles, but MIN(int...) results ints.
	 * Returning null means that this plugin is not applicable to the selected
	 * parameters.
	 */
	ColumnType getReturnType(IContext context);

	//-------------------------------------------------------------------------
	/** Executes a computation and returns the result. */
	Object compute(IContext context);

}
