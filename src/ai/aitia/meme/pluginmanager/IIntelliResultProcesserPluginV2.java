/*******************************************************************************
 * Copyright (C) 2006-2013 AITIA International, Inc.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package ai.aitia.meme.pluginmanager;

import java.util.List;

import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import ai.aitia.meme.database.IResultsDbMinimal;
import ai.aitia.meme.database.Result;
import ai.aitia.meme.processing.IIntelliGenericProcesser;

public interface IIntelliResultProcesserPluginV2 extends IPlugin, IIntelliGenericProcesser {
	/**
	 * This method should do some processing on the results that were
	 * generated by the experiment created with the DoE counterpart of this 
	 * plugin. The saved state of the plugin is provided in an XML element.
	 * @param db The access interface for the results database in MEME.
	 * @param runs	The actual results in the form of a list.
	 * @param pluginElement	The XML element that contains the saved state of the plugin.
	 */
	public List<String> processResultFiles(IResultsDbMinimal db, List<Result> runs, Element pluginElement, String isPluginXMLFileName) throws Exception;
	
	/**
	 * This method should create a chart XML Document to represent the generated
	 * results graphically. This method is called after processResultFiles, the
	 * inner state can be stored in the plugin's members.
	 * @param viewName The name of the view containing the data for the charts.
	 * @param model	The informative name of the model, to display on the charts.
	 * @param version The model's version name, it could contain useful informations, but it's not necessary.
	 * @return	A Document object containing the chart's XML configuration.
	 * @throws ParserConfigurationException
	 */
	public Document createCharts(String viewName, String model, String version) throws ParserConfigurationException;

}
